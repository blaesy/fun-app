{"version":3,"sources":["logo.svg","XDDD.png","debile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Debile","React","useState","data","setData","newData","setNewData","addNewData","e","preventDefault","saveData","loadData","Axios","get","process","headers","then","response","catch","error","console","log","useEffect","post","imie","style","margin","onSubmit","display","flexDirection","height","width","alignItems","justifyContent","src","require","fontSize","textAlign","value","onChange","target","newNewestData","type","onClick","map","item","App","className","Boolean","window","location","hostname","match","config","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,wCCA3CD,EAAOC,QAAU,IAA0B,kC,uHCiE5BC,EA9DA,WAAO,IAAD,EAEOC,IAAMC,SAAS,IAFtB,mBAEVC,EAFU,KAEJC,EAFI,OAGaH,IAAMC,SAAS,IAH5B,mBAGVG,EAHU,KAGDC,EAHC,KASXC,EAAa,SAACC,GAChBA,EAAEC,iBAEFC,KAGEC,EAAW,WACbC,IAAMC,IAAIC,4CAAgD,CACtDC,QAAS,CACL,gBAAiB,WACjB,WAAYD,8BAEjBE,MAAK,SAACC,GACLb,EAAQa,EAASd,SAClBe,OAAM,SAACC,GACNC,QAAQC,IAAI,sBAIpBD,QAAQC,IAAIlB,GAEZF,IAAMqB,WAAU,kBAAMX,MAAY,IAElC,IAAMD,EAAW,WACbE,IAAMW,KAAKT,4CAAgD,CAACU,KAAMnB,GAAU,CACxEU,QAAS,CACL,gBAAiB,WACjB,WAAYD,8BAEjBE,MAAK,SAACC,GACLG,QAAQC,IAAI,cACZV,OACDO,OAAM,SAACC,GACNC,QAAQC,IAAI,oBAIpB,OACI,yBAAKI,MAAO,CAACC,OAAQ,SACjB,0BAAMC,SAAUpB,EAAYkB,MAAO,CAACG,QAAS,OAAQC,cAAe,SAAUC,OAAQ,OAAQC,MAAO,OAAQC,WAAY,SAAUC,eAAgB,WAC/I,yBAAKC,IAAKC,EAAQ,IAAoBV,MAAO,CAACM,MAAO,WACrD,2BAAON,MAAO,CAACC,OAAQ,OAAQK,MAAO,QAASD,OAAQ,OAAQM,SAAU,OAAQC,UAAW,UAAWC,MAAOjC,EAASkC,SAAU,SAAC/B,GAAD,OA7CvH,SAACA,GACnBF,EAAWE,EAAEgC,OAAOF,OA4C4HG,CAAcjC,MACtJ,4BAAQkC,KAAK,SAASjB,MAAO,CAACC,OAAQ,OAAQK,MAAO,QAASD,OAAQ,OAAQM,SAAU,QAASO,QAASpC,GAA1G,UAEJ,yBAAKkB,MAAO,CAACG,QAAS,OAAQC,cAAe,WAA7C,OAEI1B,QAFJ,IAEIA,OAFJ,EAEIA,EAAMyC,KAAI,SAACC,GAAD,OAAS,yBAAKpB,MAAO,CAACW,SAAU,SAAUS,EAAKrB,YC7C1DsB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNjB,EAAQ,IAAUkB,SAElBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd7C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6C,c","file":"static/js/main.e1e0c8ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/XDDD.9c40eec3.png\";","import React from 'react';\r\nimport Axios from 'axios';\r\n\r\nconst Debile = () => {\r\n\r\n    const [data, setData] = React.useState([]);\r\n    const [newData, setNewData] = React.useState('');\r\n\r\n    const newNewestData = (e) => {\r\n        setNewData(e.target.value);\r\n    }\r\n\r\n    const addNewData = (e) => {\r\n        e.preventDefault();\r\n        //setData(data => [...data, newData]);\r\n        saveData();\r\n    }\r\n\r\n    const loadData = () => {\r\n        Axios.get(process.env.REACT_APP_BASE_URL + 'rest/debile', {\r\n            headers: { \r\n                'cache-control': 'no-cache',\r\n                'x-apikey': process.env.REACT_APP_API_KEY\r\n            }\r\n        }).then((response) => {\r\n            setData(response.data);\r\n        }).catch((error) => {\r\n            console.log('Nie zaladowalo');\r\n        })\r\n    }\r\n\r\n    console.log(data);\r\n\r\n    React.useEffect(() => loadData(), []);\r\n\r\n    const saveData = () => {\r\n        Axios.post(process.env.REACT_APP_BASE_URL + 'rest/debile', {imie: newData}, {\r\n            headers: { \r\n                'cache-control': 'no-cache',\r\n                'x-apikey': process.env.REACT_APP_API_KEY\r\n            }\r\n        }).then((response) => {\r\n            console.log('Udalo sie!');\r\n            loadData();\r\n        }).catch((error) => {\r\n            console.log('Nie zapisano');\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div style={{margin: '50px'}}> \r\n            <form onSubmit={addNewData} style={{display: 'flex', flexDirection: 'column', height: '40vh', width: '100%', alignItems: 'center', justifyContent: 'center'}}>\r\n                <img src={require('../src/XDDD.png')} style={{width: '200px'}}></img>\r\n                <input style={{margin: '15px', width: '200px', height: '50px', fontSize: '25px', textAlign: 'center'}} value={newData} onChange={(e) => newNewestData(e)}></input>\r\n                <button type='submit' style={{margin: '15px', width: '200px', height: '50px', fontSize: '25px'}} onClick={addNewData}>DEBIL</button>\r\n            </form>\r\n            <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                {\r\n                data?.map((item)=> <div style={{fontSize: '25px'}}>{item.imie}</div>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Debile;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Debile from '../src/debile';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Debile />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrequire('dotenv').config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}